/*
  Copyright (C) 2015 Preet Desai (preet.desai@gmail.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

#ifndef KS_TEXT_GLYPH_DESC_HPP
#define KS_TEXT_GLYPH_DESC_HPP

#include <vector>
#include <ks/KsGlobal.hpp>

namespace ks
{
    namespace text
    {
        // Glyph Metrics
        // (horizontal layout)
        // =========================================================== //
        //
        //               xMin         xMax
        //            |    |           |
        //            |    |<- width ->|
        //            |    |           |
        //            +    +--.---.----+---+-------+--- yMax
        //            |    | / .'\ \   |   ^       ^
        //  bearingX -|--->| | |  | |  |   |       |
        //            |    | \ `-' /   | bearingY  |
        //            |    | /("'``    |   |       |
        // baseline---*----+-\-'---.-- +---+--*  height
        //           /|    |  /'""'.\  |      |    |
        //     origin |    | ||     || |      |    |
        //            |    | \'. __//  |      |    v
        //            |    +--`'---'---+------+----+--- yMin
        //            |                       |
        //            +------- advanceX ----->|
        //
        //
        // (vertical layout)
        // =========================================================== //
        //
        //                          origin
        //                         /
        //  baseline -+-----------*---------+------
        //            |          |    |         |
        //            | bearingX-|<---|      bearingY
        //            |          |    |         |
        //            |          |    |         v
        //            |          +--.-+-.----+--------- yMax
        //            |          | / .|\ \   |      ^
        //            |          | | || | |  |      |
        //            |          | \ `|' /   |      |
        //        advanceY       | /("|``    |      |
        //            |          | \ '|--.   |    height
        //            |          |  /'|"'.\  |      |
        //            |          | || |   || |      |
        //            |          | \'.|__//  |      v
        //            |          +--`'+--'---+--------- yMin
        //            v          |    |      |
        //            +----------+----*      |
        //                       |           |
        //                       |<- width ->|
        //                       |           |
        //                     xMin         xMax
        //
        // =========================================================== //

        // Generated by the Atlas. Contains glyph image
        // lookup information and metrics
        struct GlyphImageDesc
        {
            // index
            // * glyph index for given font's charmap
            // * we dont keep track of unicode codepoint
            //   because index <--> unicode codepoint
            //   isnt a one-to-one mapping
            uint index;
            u16 atlas;
            u16 font;

            // texture coords (pixels) for the top
            // left corner of the glyph tex in its atlas
            u16 tex_x;
            u16 tex_y;

            // sdf quad <--> glyph offset vector (pixels)
            u16 sdf_x;
            u16 sdf_y;

            // metrics (pixels)
            s16 bearing_x;
            s16 bearing_y;
            u16 width;
            u16 height;
        };

        // Generated by ShapeText. Contains the glyph
        // index lookups for freetype used by TextAtlas
        // to render and lookup corresponding glyphs
        struct GlyphInfo
        {
            // font glyph index
            // * the index for a given glyph used to
            //   lookup/render the glyph with freetype
            // * '0' indicates a missing glyph
            uint index;

            // cluster
            // * Let a character index be defined as an index
            //   in a UTF16 string: Then clusters are the remaining
            //   logical character indices after shaping has occured
            //   See:
            //   http://thread.gmane.org/gmane.comp.freedesktop.harfbuzz/1836/
            // * Cluster helps us map the final set of shaped glyphs
            //   back to their corresponding indices in the original
            //   text string
            uint cluster;

            // font index for TextAtlas
            // * '0' indicates an invalid font
            uint font;

            // Special case override of width so that this
            // character won't be rendered
            bool zero_width;
        };

        // Generated by ShapeText to help compute
        // final glyph positions
        struct GlyphOffset
        {
            s16 offset_x;
            s16 offset_y;
            s16 advance_x;
            s16 advance_y;
        };
    }
}

#endif // KS_TEXT_GLYPH_DESC_HPP
